variable "workspace_iam_role" {
  type        = string
  description = "the iam role to assume for the workspace"
  nullable    = false
  sensitive   = true
}

terraform {
  required_version = "1.9.1"

  backend "s3" {
    bucket         = "buckets3"
    key            = "terraform.state"
    region         = "us-east-1"
    dynamodb_table = "dynamotable"

  }
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"

  assume_role {
    role_arn = var.workspace_iam_role
  }

  default_tags {
    tags = {
      Project            = "farm"
      TerraformWorkspace = terraform.workspace
    }
  }
}

resource "aws_lambda_function" "crop_add_function" {
  filename                       = ""
  function_name                  = "crop_add"
  runtime                        = "provided.al2023"
  handler                        = "bootstrap"
  timeout                        = 10
  memory_size                    = 128
  publish                        = true
  reserved_concurrent_executions = -1
  architectures                  = ["arm64"]
  source_code_hash               = ""
  role                           = aws_iam_role.crop_add_function_role.arn
}

resource "aws_iam_role" "crop_add_function_role" {
  name               = "crop_add_function_role"
  assume_role_policy = data.aws_iam_policy_document.crop_add_function_role.json
}

data "aws_iam_policy_document" "crop_add_function_role" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["lambda.amazonaws.com"]
    }
  }
}

resource "aws_dynamodb_table" "crops" {
  name           = "crops"
  billing_mode   = "PROVISIONED"
  read_capacity  = 5
  write_capacity = 5
  hash_key       = "id"

  attribute {
    name = "id"
    type = "S"
  }
}

resource "aws_api_gateway_rest_api" "crops" {
  name = "crops"

  endpoint_configuration {
    types = ["REGIONAL"]
  }

  lifecycle {
    create_before_destroy = true
  }
}

resource "aws_api_gateway_resource" "crops" {
  rest_api_id = aws_api_gateway_rest_api.crops.id
  parent_id   = aws_api_gateway_rest_api.crops.id
  path_part   = "crops"
}

resource "aws_api_gateway_method" "crops_post" {
  rest_api_id   = aws_api_gateway_rest_api.crops.id
  resource_id   = aws_api_gateway_resource.crops.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "crops_post" {
  rest_api_id             = aws_api_gateway_rest_api.crops.id
  resource_id             = aws_api_gateway_resource.crops.id
  http_method             = aws_api_gateway_method.crops_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.crop_add_function.invoke_arn
}

resource "aws_lambda_permission" "crops_post" {
  statement_id  = "AllowExecution_crops_post_FromAPI"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.crops_crop_add.function_name
  principal     = "apigateway.amazonaws.com"
  depends_on    = [aws_lambda_function.crops_crop_add]
}


